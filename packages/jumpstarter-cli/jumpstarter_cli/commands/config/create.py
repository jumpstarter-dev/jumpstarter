from typing import Optional

import asyncclick as click
from jumpstarter_cli_common import (
    AliasedGroup,
    OutputMode,
    PathOutputType,
    arg_alias,
    opt_output_path_only,
)
from jumpstarter_cli_common.exceptions import handle_exceptions

from jumpstarter.config import (
    ClientConfigV1Alpha1,
    ClientConfigV1Alpha1Drivers,
    ExporterConfigV1Alpha1,
    ObjectMeta,
    UserConfigV1Alpha1,
)


@click.group(cls=AliasedGroup)
def create():
    """Create Jumpstarter configuration files."""


@create.command("exporter")
@click.option("--namespace", prompt=True)
@click.option("--name", prompt=True)
@click.option("--endpoint", prompt=True)
@click.option("--token", prompt=True)
@opt_output_path_only
@arg_alias
@handle_exceptions
def create_exporter_config(alias: str, namespace: str, name: str, endpoint: str, token: str, output: PathOutputType):
    """Create an exporter config."""
    try:
        ExporterConfigV1Alpha1.load(alias)
    except FileNotFoundError:
        pass
    else:
        raise click.ClickException(f'exporter "{alias}" exists')

    config = ExporterConfigV1Alpha1(
        alias=alias,
        metadata=ObjectMeta(namespace=namespace, name=name),
        endpoint=endpoint,
        token=token,
    )
    path = ExporterConfigV1Alpha1.save(config)

    if output == OutputMode.PATH:
        click.echo(path)


@create.command("client")
@arg_alias
@click.option(
    "--out",
    type=click.Path(dir_okay=False, resolve_path=True, writable=True),
    help="Specify an output file for the client config.",
)
@click.option(
    "--namespace",
    type=str,
    help="Enter the Jumpstarter client namespace.",
    prompt="Enter a valid Jumpstarter client nespace",
)
@click.option(
    "--name",
    type=str,
    help="Enter the Jumpstarter client name.",
    prompt="Enter a valid Jumpstarter client name",
)
@click.option(
    "-e",
    "--endpoint",
    type=str,
    help="Enter the Jumpstarter service endpoint.",
    prompt="Enter a valid Jumpstarter service endpoint",
)
@click.option(
    "-t",
    "--token",
    type=str,
    help="A valid Jumpstarter auth token generated by the Jumpstarter service.",
    prompt="Enter a Jumpstarter auth token (hidden)",
    hide_input=True,
)
@click.option(
    "-a",
    "--allow",
    type=str,
    help="A comma-separated list of driver client packages to load.",
    prompt="Enter a comma-separated list of allowed driver packages (optional)",
    default="",
)
@click.option("--unsafe", is_flag=True, help="Should all driver client packages be allowed to load (UNSAFE!).")
@opt_output_path_only
@handle_exceptions
def create_client_config(
    alias: str,
    namespace: str,
    name: str,
    endpoint: str,
    token: str,
    allow: str,
    unsafe: bool,
    out: Optional[str],
    output: PathOutputType,
):
    """Create a client config."""
    if out is None and ClientConfigV1Alpha1.exists(alias):
        raise click.ClickException(f"A client with the name '{alias}' already exists.")

    config = ClientConfigV1Alpha1(
        alias=alias,
        metadata=ObjectMeta(namespace=namespace, name=name),
        endpoint=endpoint,
        token=token,
        drivers=ClientConfigV1Alpha1Drivers(allow=allow.split(","), unsafe=unsafe),
    )
    path = ClientConfigV1Alpha1.save(config, out)

    # If this is the only client config, set it as default
    if out is None and len(ClientConfigV1Alpha1.list()) == 1:
        user_config = UserConfigV1Alpha1.load_or_create()
        user_config.config.current_client = config
        UserConfigV1Alpha1.save(user_config)

    if output == OutputMode.PATH:
        click.echo(path)
