apiVersion: jumpstarter.dev/v1alpha1
kind: FlashBundleManifest
metadata:
  name: ti-j784s4
spec:
  manufacturer: Texas Instruments
  link: "https://www.ti.com/tool/PROCESSOR-SDK-J784S4"
# boot using the default configuration built-in flasher.itb, j784s4
# you can boot included alternative configurations, e.g. for SK-AM69 use "bootm 0x90000000#am69"
# NOTE that for bootm to work with larger kernels (like the fedora kernel in flasher-fedora.itb require larger CONFIG_BOOTM_LEN
# Using workaround to extract images manually and boot using booti instead
# FIXME beware - this relies on kernel being the first image and header being 0xd4 bytes large.
  bootcmd: "bootm 0x90000000"
  shelltype: "busybox"
  login:
    login_prompt: "login:"
    username: "root"
    prompt: "#"
  default_target: "usd"
  targets:
    usd: "/sys/class/block#4fb0000"
    emmc: "/sys/class/block#4f80000"
# removed for now, even if it's our documented procedure, if
# the board is configured to boot from sd or emmc (and not SPI), and
# the flashing of the final image fails, it will result in an un-bootable
# system -> lab admin going to the site and re-flashing SD, this can
# only be avoided by using something like sdwire
#
#  preflash_commands:
#    - "dd if=/dev/zero of=/dev/mmcblk0 bs=512 count=34"
#    - "dd if=/dev/zero of=/dev/mmcblk1 bs=512 count=34"
#
# supply custom DTB by loading your own re-using the included kernel and initrd by e.g:
# bootcmd: "bootm 0x90000000:kernel 0x90000000:initrd 0x88000000"
# dtb:
#   file: my.dtb
#   address: "0x88000000"
  kernel:
    file: data/flasher-fedora.itb
    address: "0x90000000"

  dtb:
    default: j784s4
    address: "0x88000000"
    variants:
      j784s4:
        bootcmd: "unlz4 0x900000d4 0x80000000 0x8000000; imxtract 0x90000000 fdt-j784s4 0x88000000; imxtract 0x90000000 initrd 0x89000000; booti 0x80000000 0x89000000:0x7000000 0x88000000"
      am69:
        bootcmd: "unlz4 0x900000d4 0x80000000 0x8000000; imxtract 0x90000000 fdt-am69 0x88000000; imxtract 0x90000000 initrd 0x89000000; booti 0x80000000 0x89000000:0x7000000 0x88000000"
      custom:
        bootcmd: "unlz4 0x900000d4 0x80000000 0x8000000; imxtract 0x90000000 initrd 0x89000000; booti 0x80000000 0x89000000:0x7000000 0x88000000"
